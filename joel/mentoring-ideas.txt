RCU Hardening:
-------------
This project has 2 parts:

(1) list_for_each_entry_rcu() hardening

Unlike rcu_dereference(); list_for_each_entry_rcu() has offered no RCU
pointer-checking. Accessing the list macro without rcu_read_lock() can cause
corruption of the list or other hard to find bugs. I have added basic support
for this and its upstreamed, however, more work is needed to convert all
drivers to use the API modifications for list_for_each_entry_rcu(); and finally
make CONFIG_PROVE_RCU_LIST always enabled (that is remove it), hus making the
checking as the default. Patch series introducing this checking is here:
https://lore.kernel.org/patchwork/project/lkml/list/?series=402150

(2) RCU Sparse checking:

Sparse has shown many issues in the Linux kernel but it works only when RCU
pointers are marked with __rcu. It is quite important to do this marking,
because with such marking the RCU API does additional sparse checking. I
converted many pointers to __rcu in the Linux kernel already; however more work
is needed to do more conversions and upstreaming those changes. I don't expect
mentee to convert everything; but at least converting those in the core
subsystems of the kernel would be useful. I have done this conversion for the
scheduler already and its merged:
https://patchwork.kernel.org/project/kernel-hardening/list/?series=94587
Another work here could be to do a study of sparse for RCU and see if we can
improve it (make it less noisy, show errors it is not, etc).

PR_SET_VMA patch upstreaming
-------------------------------
PR_SET_VMA mechanism is used heavily in Android for naming memory regions. The
patch is in the Android tree for several years. Upstreaming of the patch is
needed and may result in further changes as upstream maintainers review it.
Project will give the mentee a good understanding of virtual memory area
structures in the Linux kernel.

Linux kernel trace events in pstore
-----------------------------------
Pstore is a subsystem in the Linux kernel that is used to store kernel logs
which can retrieved after a machine warm-reboots.

Currently, during ftrace tracing, ftrace events in the kernel are lost when a
machine hard-locks up. There is a need for writing these events into the pstore
so that after a lock up, so that the trace events that led to the crash can be
retrieved from the Pstore after a warm reboot. This has to be done in a
scalable way so that tracing a live system does not impact performance of the
system -- ftrace is extremely fast. Initial patches posted to write and
retrieve events to/from pstore are not scalable due to locking and other
issues. Introducing a scalable approach will open up more possibilities for
crash analysis. Prototypes from Qualcomm (Sai Prakash) are available as a
reference. These prototypes are not merge ready and suffer from scalablity
issues but could be used as a starting point. Sai Prakash is presenting work
done on the initial set of patches at Linaro
Connect: https://linaroconnectsandiego.sched.com/event/Sue7/event-tracing-and-pstore-with-a-pinch-of-dynamic-debug
but further work or re-design of the approach is needed.

Simple starter tasks for mentees (during selection)
---------------------------------------------------
o listRCU.rst documentation updates - Posted an RFC, it looks Ok to Paul but
needs to be revised etc: https://lore.kernel.org/patchwork/patch/1082804/ Would
be a great intro to RCU-based lists which are 1000+ in the kernel.

o BPF -- Adding a new "bpfcall" to support reading user kernel pointers.
Currently, bpf assumes user and kernel pointers are distinct based on their
address. This assumption is incorrect as Linus Torvalds clarified. New
bpfcall(s) have to be upstreamed to support this. I posted some patches a while
in order to fix broken BPF tools (which break due to this issue):
https://lore.kernel.org/patchwork/project/lkml/list/?series=393067 Generally
the approach to fix them has been acknowledged, however more work is needed to
update documentation, code samples in the kernel and to test userspace. Review
comments are available to let mentee know exactly what needs doing. I have done
some testing already, and have seen that it fixes the issues.

