RCU Hardening:
-------------
This project has 2 parts:

(1) list_for_each_entry_rcu() hardening

Unlike rcu_dereference(); list_for_each_entry_rcu() has (until recently)
offered no RCU pointer-checking. Accessing the list macro without
rcu_read_lock() can cause corruption of the list or other hard to find bugs.
I have added basic support for this and its upstreamed, however, more work is
needed to convert all drivers to use the API modifications for
list_for_each_entry_rcu(); and finally make CONFIG_PROVE_RCU_LIST always
enabled (that is remove it), hus making the checking as the default. Patch
series introducing this checking is here:
https://lore.kernel.org/patchwork/project/lkml/list/?series=402150

(2) RCU Sparse checking:

Sparse has shown many incorrect RCU pointer usage issues in the Linux kernel
but it works only when RCU pointers are marked with __rcu. It is quite
important to do this marking, because with such marking the RCU API does
additional sparse checking. I converted many pointers to __rcu in the Linux
kernel already; however more work is needed to do more conversions and
upstreaming those changes. I don't expect a mentee to convert everything; but
at least converting those in the core subsystems of the kernel would be
useful. I have done this conversion for the scheduler already and its merged:
https://patchwork.kernel.org/project/kernel-hardening/list/?series=94587
Another work here could be to do a study of sparse for RCU and see if we can
improve it (make it less noisy, show better errors, etc).

PR_SET_VMA patch upstreaming
-------------------------------
PR_SET_VMA mechanism is used heavily in Android for naming memory regions. The
patch is in the Android tree for several years. Upstreaming of the patch is
needed and may result in further changes as upstream maintainers review it.
Project will give the mentee a good understanding of virtual memory area
structures in the Linux kernel.

Linux kernel trace events in pstore
-----------------------------------
Pstore is a subsystem in the Linux kernel that is used to store kernel logs
which can retrieved after a machine warm-reboots.

Currently, during ftrace tracing, ftrace events in the kernel are lost when a
machine hard-locks up. There is a need for writing these events into the pstore
so that after a lock up, so that the trace events that led to the crash can be
retrieved from the Pstore after a warm reboot. This has to be done in a
scalable way so that tracing a live system does not impact performance of the
system -- ftrace is extremely fast. Initial patches posted to write and
retrieve events to/from pstore are not scalable due to locking and other
issues. Introducing a scalable approach will open up more possibilities for
crash analysis. Prototypes from Qualcomm (Sai Prakash) are available as a
reference. These prototypes are not merge ready and suffer from scalablity
issues but could be used as a starting point. Sai Prakash is presenting work
done on the initial set of patches at Linaro
Connect: https://linaroconnectsandiego.sched.com/event/Sue7/event-tracing-and-pstore-with-a-pinch-of-dynamic-debug
but further work or re-design of the approach is needed.

Simple starter tasks for mentees (during selection)
===================================================
For RCU
-------
o listRCU.rst documentation updates - Posted an RFC, it looks Ok to Paul but
needs to be revised etc: https://lore.kernel.org/patchwork/patch/1082804/. Would
be a great intro to RCU-based lists which are 1000+ in the kernel; and also
a great way mentee to start sending patches and getting used to upstream workflow.
The document is mostly complete.
Applicants should put the code on github or send patches via git-send-email to
Joel for initial review, before posting it publicly.

o Read the whatIsRCU document and come up with a simple kernel module to create a
few "reader" and "writer" kernel threads and demonstrate the working of RCU.
Applicants should put the code on github or send patches via git-send-email to
Joel for evaluation.

o Find at least 2 RCU sparse warning in the Linux kernel by running the sparse
tool. Explain the warning(s) and propose fixes for them.
Applicants should put the code on github or send patches via git-send-email to
Joel for initial review, before posting it publicly.

For the pstore/trace project
----------------------------
o Read the kernel documentation and explain how the ftrace ring buffer works
in a few sentences. The kernel documentation has quite a detailed document
explaining its design. Also, explain how and when a trace record in the ring
buffer is converted to text.
Applicants should send the explanation to Joel for evaluation.

o Every trace record is represented by an entry in the ring buffer. This
entry contains some generic fields. Add a new field to this that contains the
number 5 whenever a new record is created, and add code to print this number
whenever the ftrace buffer is printed (by: cat /sys/kernel/debug/tracing/trace).
This task is so that the participant gets an idea of how the ring buffer
works which is key to implementing this feature.
Applicants should put the code on github or send patches via git-send-email to
Joel for evaluation.

o Write a kernel module to crash the kernel and retrieve the crash logs from
pstore (This can be done using qemu and I can provide instructions for how to
set up Qemu for this). This is to understand how pstore works.
Applicants should put the code on github or send patches via git-send-email to
Joel for evaluation.

For the -mm project (whenever we get to it in the future)
---------------------------------------------------------
o Write a kernel patch and a userspace program to add a test prctl(2) command to
the kernel which prints "hello world" to the kernel logs.
Applicants should put the code on github or send patches via git-send-email to
Joel for evaluation.

o Explain how "virtual memory areas" are represented in the kernel (which
data structures) and what is their purpose.
Applicants should send the explanation to Joel for evaluation.
